<% title "#{@bowl.name}" %>
<!-- this needs to be refactored to use JQUERY -->
<div class="column" data-id="<%= @bowl.id %>">
  <div class="bowl_container">
    <% if !@bowl.scraps.empty? %>
      <%= link_to bowl_scrap_path(@bowl, @bowl.scraps.sample), class: "random-bowl" do %>
        <div class="bowl"></div>
      <% end %>
    <% else %>
      <%= link_to new_bowl_scrap_path(@bowl), class: "random-bowl" do %>
        <div class="bowl">
        </div>
      <% end %>
    <% end %>

    <a class="previous">&#8249;</a>
    <h2 class="bowl-name"><%= @bowl.name %></h2>
    <a class="next">&#8250;</a>

    <p><a id="show-scraps">show scraps</a></p>
    <div id="scraps"></div>
    <p><a id="add-scraps">add scraps</a></p>
    <div id="scraps-form">
      <%= form_for @bowl do |f| %>
        <%= render 'scrap_form', f: f %>
        <%= f.submit %>
      <% end %>
    </div>
    <p><a id="remove-scraps">remove scraps</a></p>
    <div id="remove-scraps-form">
      <%= form_for @bowl do |f| %>
        <%= render 'remove_scrap_form', f: f %>
        <%= f.submit %>
      <% end %>
    </div>

    <p><%= link_to "edit bowl", edit_bowl_path, id: "edit-bowl" %></p>
  </div>
</div>

<script type="text/javascript" charset="utf-8">
  $(document).ready(function() {
    // Global Variables
    let id = $(".column").data("id");

    // Scrap Prototype
    function Scrap(id, description, priority) {
      this.id = id;
      this.description = description;
      this.priority = priority || 0;
      this.format = function() {
        return `${this.description}<br />`;
      };
    };

    // Hide scraps div initially
    $("#scraps").hide();

    // Event Listener: #show-scraps button
    $("#show-scraps").on("click", function(event) {
      event.preventDefault();
      getScraps(id, showScraps);
    });

    // Event Listener: #add-scraps button
    $("#add-scraps").click(function(){
      $("#scraps-form").slideToggle();
    });

    // Event Listener: #remove-scraps button
    $("#remove-scraps").click(function(){
      $("#remove-scraps-form").slideToggle();
    });

    // Fetch scraps from database
    function getScraps(id, callback) {
      fetch(`/bowls/${id}.json`, {
        contentType: 'application/json',
        method: 'GET',
      })
      .then(response => {
        return response.json();
      })
      .then(data => {
        let scraps = data.scraps;
        callback(scraps);
      });
    };

    // Display scraps and toggle "show/hide scrap" button
    function showScraps(scraps) {
      $('#scraps').html("");
      if (scraps.length > 0) {
        scraps.forEach(function(params) {
          appendScrap(params);
        });
      } else {
        $('#scraps').append("This bowl has no scraps");
      }
      toggleShowScrapsLink();
    };

    // Append scraps to #scraps div
    function appendScrap(scrap) {
      const newScrap = new Scrap(scrap.id, scrap.description, scrap.priority);
      const newScrapFormat = newScrap.format();
      // Clear #scraps div if the bowl has no scraps
      if ($('#scraps:contains("This bowl has no scraps")').length) {
        $('#scraps').html("");
      };
      $('#scraps').append(newScrapFormat);
    };

    // Toggle "show scraps"/"hide scraps" text
    function toggleShowScrapsLink() {
      $("#scraps").slideToggle();
      if ($("#show-scraps").text() == "show scraps") {
        $("#show-scraps").text("hide scraps");
      } else {
        $("#show-scraps").text("show scraps");
        hideScraps();
      };
    };

    // Clear #scraps div
    function hideScraps() {
      $("#scraps").html("");
    };

    // Form submit
    $('form').submit(function(event) {
      event.preventDefault();
      let data = $(this).serialize();
      let url = `/bowls/${id}`;

        $.ajax({
          url: url,
          type: "PUT",
          data: data,
          // headers: { 'Content-Type': 'application/json' },
          success: function(response) { // response => bowl object
            $(`#edit_bowl_${id}`)[0].reset();
            if (typeof response == "object") {
              let newScrap = response.scraps[response.scraps.length-1];
              appendScrap(newScrap);
            } else {
              // Presumably the ojbect already exists, as that is
              // our only validation on the BowlScrap model
              alert("Scrap already exists!");
              // but let's implement a prettier error handler?
            };
          }
        });
      });

    // Sifting Through Bowls

    // Event listener: .next button
    $(".next").click(function(event) {
      event.preventDefault();
      let incrementer = 1;
      getAdjascentBowl(incrementer);
    });

    // Event listener: .previous button
    $(".previous").click(function(event) {
      event.preventDefault();
      let incrementer = -1;
      getAdjascentBowl(incrementer);
    });

    // Load previous/next bowl
    function getAdjascentBowl(incrementer) {
      // Hide scraps if displayed
      if ($("#show-scraps").text() == "hide scraps") {
        $('#show-scraps').click();
      };
      $('#elementid').click();
      // Retrieve current bowl as JS object
      $.get("/bowls.json", function(response) { // respone => array of bowl objects
        let currentBowlIndex = response.findIndex(function(bowl) {
          return bowl.id == id;
        });
        // Retrieve adjascent bowl as JS object
        let adjascentBowlIndex = currentBowlIndex+incrementer;
        let adjascentBowl = response[adjascentBowlIndex];

        // If adjascent bowl exists, grab its data
        if (adjascentBowl != undefined) {
          $.get(`/bowls/${adjascentBowl.id}.json`, function(adjBowlJsonData) {
            // Update id to be adjascentBowl's id
            id = adjBowlJsonData.id;
            // Populate DOM with JSON data
            $(".bowl-name").html(adjBowlJsonData.name);
            $(document).prop('title', `BOWLS | ${adjBowlJsonData.name}`);
            $("#edit-bowl").attr("href", `/bowls/${id}/edit`);
            $("form.edit_bowl").attr("id", `edit_bowl_${id}`);
            // $("form.edit_bowl").attr("action", `/bowls/${id}`);

            // Set href for .random-bowl
            if (adjBowlJsonData.scraps.length > 0) {
              let randomScrap = adjBowlJsonData.scraps[Math.floor(Math.random()*adjBowlJsonData.scraps.length)];
              $(".random-bowl").attr("href", `/bowls/${id}/scraps/${randomScrap.id}`);
            } else {
              $(".random-bowl").attr("href", `/bowls/${id}/scraps/new`);
            };

            // Change style of previous/next button
            // if (adjascentBowlIndex == response.length-1) {
            //   $("a.next").attr("class", "next none");
            // } else if (adjascentBowlIndex == 0) {
            //   $("a.previous").attr("class", "previous none");
            // } else {
            //   $("a.next").attr("class", "next");
            //   $("a.previous").attr("class", "previous");
            // };
          });
        };
      }); // .get request
    }; // getAdjascentBowl

  });
</script>

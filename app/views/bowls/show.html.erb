<% title "#{@bowl.name}" %>
<!-- this needs to be refactored to use JQUERY -->
<div class="column" data-id="<%= @bowl.id %>">
  <div class="bowl_container">
    <% if !@bowl.scraps.empty? %>
      <%= link_to bowl_scrap_path(@bowl, @bowl.scraps.sample), class: "foo" do %>
        <div class="bowl"></div>
      <% end %>
    <% else %>
      <%= link_to new_bowl_scrap_path(@bowl), class: "foo" do %>
        <div class="bowl">
        </div>
      <% end %>
    <% end %>

    <a class="previous">&#8249;</a>
    <h2 class="bowl-name"><%= @bowl.name %></h2>
    <a class="next">&#8250;</a>

    <p><a id="show-scraps">show scraps</a></p>
    <div id="scraps"></div>
    <p><a id="add-scraps">add scraps</a></p>
    <div id="scraps-form">
      <%= form_for @bowl do |f| %>
        <%= render 'scrap_form', f: f %>
        <%= f.submit %>
      <% end %>
    </div>

    <p><%= link_to "edit bowl", edit_bowl_path, id: "edit-scrap" %></p>
  </div>
</div>

<script type="text/javascript" charset="utf-8">
$(document).ready(function() {

  // Scrap Prototype
  function Scrap(description, priority) {
    this.description = description;
    // this.priority = priority || 0;
    this.format = function() {
      console.log(`From Scrap prototype: ${this.description}</ br>`);
    };
  };

  var hello = new Scrap("hello");
  hello.format();
  let scrapResponse = "";
  let id = $(".column").data("id");

  // this just sets the scrapResponse variable
  function getScraps(id) {
    debugger;
    $.ajax({
      url: `/bowls/${id}.json`,
      type: "GET",
      success: function(response) {
        alert("Yeah it's ok");
      },
      error: function(jqxhr, status, exception) {
        alert("Exception:", exception);
      }
    }).done(setScrapResponse);
  };

  function setScrapResponse(response) {
    debugger;
    if (response.scraps.length == 0) {
      scrapResponse = `<p>This bowl has no scraps</p>`;
      debugger;
    } else {
      scrapResponse = response.scraps.map(e => e.description).join(`<br>`);
      debugger;
    };
  };

  // Displaying Scraps
  function showScraps() {
    $("#scraps").html(scrapResponse);
    console.log("Firing from showScraps()");
  };

  function hideScraps() {
    $("#scraps").html("");
  };

  function toggleShowScrapsLink() {
    if ($("#show-scraps").html() == "show scraps") {
      $("#show-scraps").html("hide scraps");
      showScraps();
      console.log("Firing from toggleShowScrapsLink");
    } else {
      $("#show-scraps").html("show scraps");
      hideScraps();
    }; // toggleShowScrapsLink
  };

  // Event Listener: toggle add scraps form
  $("#add-scraps").click(function(){
      $("#scraps-form").toggle();
  });
  // Event Listener: toggle show scraps
  $("#show-scraps").on("click", function(event) {
    event.preventDefault();
    if (scrapResponse == "") {
      debugger;
      console.log("From event listener on #show-scraps: scrapResponse is nil")
      getScraps(id);
      debugger;
      // toggleShowScrapsLink();
      // debugger;
    } else {
      debugger;
      console.log("From event listener on #show-scraps: scrapResponse is something")
      toggleShowScrapsLink();
      debugger;
    }
  }); // click #show-scraps event

  //form submit
  $('form').submit(function(event) {
      event.preventDefault();
      alert("YO!");
      var values = $(this).serialize();
      var posting = $.post(`/bowls/${id}`, values);
      posting.done(function(data) {
        console.log("data");
        console.log(data);
        console.log(data.scraps[data.scraps.length-1]);
        getScraps(id);
      });
    });

  $(".previous").click(function(event) {
    event.preventDefault();
    // grab all bowls
    // i don't want to fire this request if there's no previousBowl
    $.get("/bowls.json", function(response) {
      // find JSON bowl where id == id
      let thisBowlId = response.findIndex(function(element) {
        return element.id == id;
      });
      // set previousBowl => object
      let previousBowl = response[thisBowlId-1];
      // if previousBowl exists
      if (previousBowl != undefined) {
        // grab the previousBowl's data
        $.get(`/bowls/${previousBowl.id}.json`, function(jsonResponse) {
          scrapResponse = "";
          if ($("#show-scraps").html() == "hide scraps") {
            $("#show-scraps").html("show scraps");
            $("#scraps").html("");
          };
          $(".bowl-name").html(jsonResponse.name);
          $(document).prop('title', `BOWLS | ${jsonResponse.name}`);
          id = jsonResponse.id;
          $("#edit-scrap").attr("href", `/bowls/${id}/edit`);
          var randomScrap = jsonResponse.scraps[Math.floor(Math.random()*jsonResponse.scraps.length)];
          $(".foo").attr("href", `/bowls/${id}/scraps/${randomScrap.id}`);
          console.log("previousBowl id");
          console.log(previousBowl.id);
          if (isNaN(previousBowl.id)) {
            console.log("previousBowl is NaN")
            $("a.previous").attr("class", "previous none");
          };
        });
      } else {
        console.log("previousBowl is undefined!!!");
      };
    });
  }); // click .previous event

  // NEXT FUNCTIONALITY
  $(".next").click(function(event) {
    event.preventDefault();
    // grab all bowls
    // i don't want to fire this request if there's no nextBowl
    $.get("/bowls.json", function(response) {
      // find JSON bowl where id == id
      let thisBowlId = response.findIndex(function(element) {
        return element.id == id;
      });
      // set nextBowl => object
      let nextBowl = response[thisBowlId+1];
      // if nextBowl exists
      if (nextBowl != undefined) {
        // grab the nextBowl's data
        $.get(`/bowls/${nextBowl.id}.json`, function(jsonResponse) {
          scrapResponse = "";
          // toggle show/hide scraps
          if ($("#show-scraps").html() == "hide scraps") {
            $("#show-scraps").html("show scraps");
            $("#scraps").html("");
          };
          // plug in JSON data
          $(".bowl-name").html(jsonResponse.name);
          $(document).prop('title', `BOWLS | ${jsonResponse.name}`);
          id = jsonResponse.id;
          $("#edit-scrap").attr("href", `/bowls/${id}/edit`);
          // if there are scraps
          var randomScrap = jsonResponse.scraps[Math.floor(Math.random()*jsonResponse.scraps.length)];
          console.log(`Random scrap is ${randomScrap}`);
          $(".foo").attr("href", `/bowls/${id}/scraps/${randomScrap.id}`);
          console.log("nextBowl id");
          console.log(nextBowl.id);
          if (isNaN(nextBowl.id)) {
            console.log("nextBowl is NaN")
            $("a.next").attr("class", "next none");
          };
        });
      } else {
        console.log("nextBowl is undefined!!!");
      };
    });
  }); // click .previous event

}); // document ready
</script>

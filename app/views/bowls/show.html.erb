<% title "#{@bowl.name}" %>
<!-- this needs to be refactored to use JQUERY -->
<div class="column" data-id="<%= @bowl.id %>">
  <div class="bowl_container">
    <% if !@bowl.scraps.empty? %>
      <%= link_to bowl_scrap_path(@bowl, @bowl.scraps.sample), class: "foo" do %>
        <div class="bowl"></div>
      <% end %>
    <% else %>
      <%= link_to new_bowl_scrap_path(@bowl), class: "foo" do %>
        <div class="bowl">
        </div>
      <% end %>
    <% end %>

    <a class="previous">&#8249;</a>
    <h2 class="bowl-name"><%= @bowl.name %></h2>
    <a class="next">&#8250;</a>

    <p><a id="show-scraps">show scraps</a></p>
    <div id="scraps"></div>
    <p><a id="add-scraps">add scraps</a></p>
    <div id="scraps-form">
      <%= form_for @bowl do |f| %>
        <%= render 'scrap_form', f: f %>
        <%= f.submit %>
      <% end %>
    </div>

    <p><%= link_to "edit bowl", edit_bowl_path, id: "edit-scrap" %></p>
  </div>
</div>

<script type="text/javascript" charset="utf-8">
$(document).ready(function() {
  $("#scraps").hide();

  // Scrap Prototype
  function Scrap(id, description, priority) {
    this.id = id;
    this.description = description;
    this.priority = priority || 0;
    this.format = function() {
      return `${this.description}<br />`;
    };
  };

  var hello = new Scrap(99, "hello");
  hello.format();
  let scrapResponse = "";
  let id = $(".column").data("id");

  // Retrieve scraps from DB
  function getScraps(id, callback) {
    fetch(`/bowls/${id}.json`, {
      contentType: 'application/json',
      method: 'GET',
    })
    .then(response => {
      return response.json();
    })
    .then(data => {
      let scraps = data.scraps;
      callback(scraps);
    });
  };

  // Display scraps
  function showScraps(scraps) {
    $('#scraps').html("");
    scraps.forEach(function(params) {
      const scrap = new Scrap(params.id, params.description, params.priority);
      const scrapHtml = scrap.format();
      $('#scraps').append(scrapHtml);
    });
    toggleShowScrapsLink();
  };

  function hideScraps() {
    $("#scraps").html("");
  };

  function toggleShowScrapsLink() {
    $("#scraps").slideToggle();
    if ($("#show-scraps").text() == "show scraps") {
      $("#show-scraps").text("hide scraps");
    } else {
      $("#show-scraps").text("show scraps");
      hideScraps();
    };
  };

  // Event Listener: show scraps
  $("#show-scraps").on("click", function(event) {
    event.preventDefault();
    getScraps(id, showScraps);
  });

  // Event Listener: add scraps form
  $("#add-scraps").click(function(){
    if ($("#show-scraps").text() == "show scraps") {
      $('#show-scraps').click();
    }
    $("#scraps-form").toggle();
  });

  //form submit
  $('form').submit(function(event) {
    event.preventDefault();
    var data = $(this).serialize();

      $.ajax({
        url: `/bowls/${id}.json`,
        type: "PUT",
        data: data,
      }).done(function(response) {
        // $('#add-scraps').click();
        $('#show-scraps').click();
      });
    });

  $(".previous").click(function(event) {
    event.preventDefault();
    // grab all bowls
    // i don't want to fire this request if there's no previousBowl
    $.get("/bowls.json", function(response) {
      // find JSON bowl where id == id
      let thisBowlId = response.findIndex(function(element) {
        return element.id == id;
      });
      // set previousBowl => object
      let previousBowl = response[thisBowlId-1];
      // if previousBowl exists
      if (previousBowl != undefined) {
        // grab the previousBowl's data
        $.get(`/bowls/${previousBowl.id}.json`, function(jsonResponse) {
          scrapResponse = "";
          if ($("#show-scraps").html() == "hide scraps") {
            $("#show-scraps").html("show scraps");
            $("#scraps").html("");
          };
          $(".bowl-name").html(jsonResponse.name);
          $(document).prop('title', `BOWLS | ${jsonResponse.name}`);
          id = jsonResponse.id;
          $("#edit-scrap").attr("href", `/bowls/${id}/edit`);
          var randomScrap = jsonResponse.scraps[Math.floor(Math.random()*jsonResponse.scraps.length)];
          $(".foo").attr("href", `/bowls/${id}/scraps/${randomScrap.id}`);
          if (isNaN(previousBowl.id)) {
            $("a.previous").attr("class", "previous none");
          };
        });
      } else {
      };
    });
  }); // click .previous event

  // NEXT FUNCTIONALITY
  $(".next").click(function(event) {
    event.preventDefault();
    // grab all bowls
    // i don't want to fire this request if there's no nextBowl
    $.get("/bowls.json", function(response) {
      // find JSON bowl where id == id
      let thisBowlId = response.findIndex(function(element) {
        return element.id == id;
      });
      // set nextBowl => object
      let nextBowl = response[thisBowlId+1];
      // if nextBowl exists
      if (nextBowl != undefined) {
        // grab the nextBowl's data
        $.get(`/bowls/${nextBowl.id}.json`, function(jsonResponse) {
          scrapResponse = "";
          // toggle show/hide scraps
          if ($("#show-scraps").html() == "hide scraps") {
            $("#show-scraps").html("show scraps");
            $("#scraps").html("");
          };
          // plug in JSON data
          $(".bowl-name").html(jsonResponse.name);
          $(document).prop('title', `BOWLS | ${jsonResponse.name}`);
          id = jsonResponse.id;
          $("#edit-scrap").attr("href", `/bowls/${id}/edit`);
          // if there are scraps
          var randomScrap = jsonResponse.scraps[Math.floor(Math.random()*jsonResponse.scraps.length)];
          $(".foo").attr("href", `/bowls/${id}/scraps/${randomScrap.id}`);
          if (isNaN(nextBowl.id)) {
            $("a.next").attr("class", "next none");
          };
        });
      } else {
      };
    });
  }); // click .previous event

}); // document ready
</script>
